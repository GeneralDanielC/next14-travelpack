// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())

  lists      List[]
  categories Category[]
  ListShare  ListShare[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String //String and not Text for MongoDB
  access_token      String? @db.String // String and not Text for MongoDB
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // expires DateTime // see 05:38:00 not implemented but can be good so user doesn't need to 2FA every time.

  @@unique([userId])
}

// model ListType {
//   id              String  @id @default(auto()) @map("_id") @db.ObjectId
//   title           Types
//   emoji           String
//   emojiBackground String
//   description     String?
//   List            List[]
// }

// List has 2 themes, 1 of which refers to the type.
// If type === packing => theme, else no theme.
// 

enum Types {
  TODO
  PACKING
  GROCERY
}

model List {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  departAt  DateTime?
  typeId    String      @db.ObjectId
  type      Theme       @relation(name: "ListType", fields: [typeId], references: [id])
  themeId   String?     @db.ObjectId
  theme     Theme?      @relation(name: "ListTheme", fields: [themeId], references: [id])
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     Item[]
  shares    ListShare[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ListShare {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  listId  String  @db.ObjectId
  userId  String  @db.ObjectId
  list    List    @relation(fields: [listId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  canEdit Boolean
}

model Theme {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  emoji           String
  emojiBackground String
  description     String?
  isListType      Boolean @default(false)
  ListsAsType     List[]  @relation(name: "ListType")
  List            List[]  @relation(name: "ListTheme")
}

model Item {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  quantity   Int?
  isChecked  Boolean  @default(false)
  createdAt  DateTime @default(now())
  listId     String   @db.ObjectId
  list       List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  displayName String
  workName    String
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
  items       Item[]
  //isEditable?
}
